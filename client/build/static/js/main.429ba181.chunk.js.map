{"version":3,"sources":["components/landing.js","components/helpers.js","components/auth-service.js","components/navbar.js","components/register.js","components/login.js","components/protected-route.js","components/add-deck.js","components/create-card.js","components/profile.js","components/rate-card.js","components/card-display.js","components/deck-info.js","components/run-deck.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","history","useHistory","Container","className","fluid","style","display","flexDirection","justifyContent","marginTop","Card","width","flex","marginLeft","marginRight","Body","Title","Text","Button","onClick","push","variant","fetchCall","payload","a","console","log","authService","currentUserValue","auth","refresh","updateUserData","fetch","url","method","authHeader","JSON","stringify","body","headers","response","status","json","currentUserSubject","BehaviorSubject","parse","localStorage","getItem","login","logout","newUser","res","access","setItem","next","currentUser","asObservable","value","userData","clear","process","local","alert","error","to","Authorization","NavBar","useState","setCurrentUser","useLocation","useEffect","subscription","subscribe","user","unsubscribe","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","eventKey","username","Register","requiredMsg","fields","email","password","jwtresponse","pathname","state","Header","fontSize","Subtitle","initialValues","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","handleSubmit","render","errors","touched","htmlFor","name","type","component","Login","idPayload","idResponse","toast","goBack","PrivateRoute","props","authenticated","Date","jwt_decode","exp","path","exact","AddDeck","deck_name","deck_description","userDeckPayload","user_id","userId","deck_id","userDeckResponse","deckCallback","CreateCard","decks","setDecks","selectedDeck","setSelectedDeck","question","answer","user_deck_id","next_time_to_show","fullDecks","element","obj","find","object","undefined","toAdd","fetchData","deckDropdown","forEach","deck","index","Dropdown","Item","as","e","DropdownButton","title","actions","resetForm","cardCallback","Profile","location","addingDeck","setAddingDeck","addingCard","setAddingCard","deckPayload","deckResponse","RateCard","handleClick","rating","handleRate","Row","Col","CardDisplay","isFlipped","setIsFlipped","setRating","event","preventDefault","flipDirection","cursor","alignItems","height","nextCard","DeckInfo","numCards","cardIndex","RunDeck","setCardIndex","cards","setCards","length","App","position","autoClose","hideProgressBar","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.429ba181.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, Container, Button } from \"react-bootstrap\";\n\nfunction LandingPage() {\n  const history = useHistory();\n\n  function handleRegister() {\n    history.push(\"/register\");\n    return;\n  }\n\n  function handleLogin() {\n    history.push(\"/login\");\n    return;\n  }\n\n  return (\n    <>\n      <Container\n        className=\"center\"\n        fluid=\"md\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          marginTop: \"20%\",\n        }}\n      >\n        <head>\n          <title>Spaced Flashcards Project - OSU Winter Hackathon 2020</title>\n        </head>\n        <h1>Spaced Flashcards</h1>\n\n        <Card\n          style={{\n            width: \"50%\",\n            flex: \"1\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n          }}\n        >\n          <Card.Body>\n            <Card.Title>A Proven System</Card.Title>\n            <Card.Text>\n              Research shows that spaced repetition is an extremely effective\n              strategy for memory retention and learning. What topic would you\n              like to know more completely?\n            </Card.Text>\n            <Button\n              onClick={handleLogin}\n              style={{ marginRight: \"25px\" }}\n              variant=\"primary\"\n            >\n              Login\n            </Button>\n            <Button onClick={handleRegister} variant=\"primary\">\n              Register in Seconds\n            </Button>\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n}\n\nexport default LandingPage;\n","import { authService } from \"./auth-service\";\n\n/* general configurable helper function to send POST requests to the server */\nexport async function fetchCall(payload) {\n  console.log(authService.currentUserValue);\n  if (payload.auth && authService.currentUserValue.refresh) {\n    /* refresh the jwt */\n    await authService.updateUserData();\n  }\n  let response = await fetch(payload.url, {\n    method: payload.method,\n    headers: payload.auth\n      ? await authService.authHeader()\n      : { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(payload.body),\n  });\n  if (response.status >= 400) {\n    /* TODO: error handle */\n  } else {\n    return await response.json();\n  }\n}\n","import { Redirect } from \"react-router\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fetchCall } from \"./helpers\";\n\nconst currentUserSubject = new BehaviorSubject(\n  JSON.parse(localStorage.getItem(\"currentUser\"))\n);\n\n/* methods provided by the authentication service */\nexport const authService = {\n  login,\n  logout,\n  authHeader,\n  newUser,\n  updateUserData,\n  currentUser: currentUserSubject.asObservable(),\n  get currentUserValue() {\n    return currentUserSubject.value;\n  },\n};\n\n/* store userData in local storage and update authentication state by\n * pushing to the observable */\nasync function login(userData) {\n  localStorage.setItem(\"currentUser\", JSON.stringify(userData));\n  currentUserSubject.next(userData);\n}\n\n/* log user out: clear localStorage and push null to observable */\nfunction logout() {\n  localStorage.clear();\n  currentUserSubject.next(null);\n}\n\n/* re-authenticate user (refresh jwt) */\n/* TODO */\nasync function updateUserData() {\n  let payload = {\n    url: process.env.REACT_APP_BASE_URL + \"auth/jwt/refresh\",\n    method: \"POST\",\n    auth: false,\n    body: {\n      refresh: authService.currentUserValue.refresh,\n    },\n  };\n  try {\n    let response = await fetchCall(payload);\n    console.log(\"refreshing user jwt, response is:\", JSON.stringify(response));\n    let local = JSON.parse(localStorage.getItem(\"currentUser\"));\n    local.access = response.access;\n    localStorage.setItem(\"currentUser\", JSON.stringify(local));\n    currentUserSubject.next(local);\n    return;\n  } catch (err) {\n    /* TODO: error handling... */\n    alert(\"error refreshing jwt!  logging you out!\");\n    console.error(err);\n    authService.logout();\n    return <Redirect to=\"/login\" />;\n  }\n}\n\n/* if new user has registered, logs them in and sets state */\nfunction newUser(res) {\n  if (!res.refresh || !res.access) {\n    /* should not be possible */\n    return logout();\n  }\n  localStorage.setItem(\"currentUser\", JSON.stringify(res));\n  currentUserSubject.next(res);\n}\n\n/* returns HTTP authorization header containing JWT of currently logged-in\n * user, otherwise empty object if user not logged in */\nasync function authHeader() {\n  const currentUser = authService.currentUserValue;\n  if (currentUser && currentUser.access) {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `JWT ${currentUser.access}`,\n    };\n  } else {\n    return {};\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nimport { useLocation } from \"react-router\";\nimport { authService } from \"./auth-service\";\nimport {useHistory} from 'react-router-dom';\n\nexport default function NavBar() {\n  const history = useHistory();\n  const [currentUser, setCurrentUser] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const subscription = authService.currentUser.subscribe((user) =>\n      setCurrentUser(user)\n    );\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [currentUser]);\n\n  function logoutHelper() {\n    authService.logout();\n    history.push(\"/\");\n\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/profile\">Spaced Flashcards</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav variant=\"pills\" className=\"mr-auto\">\n            <Nav.Link eventKey=\"1\" href=\"/profile\">\n              My Decks\n            </Nav.Link>\n          </Nav>\n          {!currentUser ? (\n            <Nav variant=\"pills\">\n              <Nav.Link eventKey=\"3\" href=\"/login\">\n                Login\n              </Nav.Link>\n              <Nav.Link eventKey=\"4\" href=\"/register\">\n                Register\n              </Nav.Link>\n            </Nav>\n          ) : (\n            <>\n              <p>{`welcome back, ${currentUser.userData.username}`}</p>\n              <Button onClick={logoutHelper}>Logout!</Button>\n            </>\n          )}\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Register() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    alert(`submit registration data to backend: ${JSON.stringify(fields)}`);\n    const { email, username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        email: email,\n        password: password,\n      },\n    };\n    let response = await fetchCall(payload);\n    console.log(\n      `response to register user call is: ${JSON.stringify(response)}`\n    );\n\n    /* now that user has been created, get the jwt */\n    payload.url = process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\";\n    let jwtresponse = await fetchCall(payload);\n    jwtresponse.userData = { username, email };\n    console.log(`response to jwt call is: ${JSON.stringify(jwtresponse)}`);\n    authService.newUser(jwtresponse);\n    history.push({\n      pathname: \"/profile\",\n      state: response,\n    });\n\n    return;\n  }\n\n  console.log(`the base url is: ${process.env.REACT_APP_BASE_URL}`);\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Register</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Begin learning today by creating an account and joining the Spaced\n            Flashcards community! Just give us some basic information...\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              email: Yup.string()\n                .email(\"Email is invalid!!\")\n                .required(requiredMsg),\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n              confirmPassword: Yup.string()\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    name=\"email\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.email && touched.email ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                  <Field\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.confirmPassword && touched.confirmPassword\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"confirmPassword\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Register\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    // alert(`submit login data to backend: ${JSON.stringify(fields)}`);\n    const { username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        password: password,\n      },\n    };\n    try {\n      let response = await fetchCall(payload);\n      response.userData = { username };\n      console.log(`response to login call is ${JSON.stringify(response)}`);\n      authService.login(response);\n      /* now fetch the userId */\n      console.log(authService.currentUserValue);\n      let idPayload = {\n        url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n        method: \"GET\",\n        auth: true,\n      };\n      let idResponse = await fetchCall(idPayload);\n      console.log(\n        `the response from getting id is: ${JSON.stringify(idResponse)}`\n      );\n      history.push({\n        pathname: \"/profile\",\n        state: idResponse[0],\n      });\n      return;\n    } catch (err) {\n      /* todo: error handling */\n      console.error(err);\n      toast.error(`Invalid login info, please retry!`);\n      history.push(\"/temp\");\n      history.goBack();\n      return;\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Login</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Login to access your decks and reinfornce your knowledge\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Login\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { authService } from \"./auth-service\";\nimport jwt_decode from \"jwt-decode\";\nimport { fetchCall } from \"./helpers\";\n\n/* TODO: this needs to refresh the jwt token */\nconst PrivateRoute = (props) => {\n  const authenticated =\n    !localStorage.getItem(\"currentUser\") || !authService.currentUserValue\n      ? false\n      : !(\n          new Date(\n            1000 * jwt_decode(authService.currentUserValue.refresh).exp\n          ) > new Date()\n        )\n      ? false\n      : true;\n  if (!authenticated) {\n    console.log(\"trying to log this guy out\");\n    authService.logout();\n    return <Redirect to=\"/login\" />;\n  }\n  // /* refresh the token */\n  // /* get the localstorage data */\n  // let payload = {\n  //   url: process.env.REACT_APP_BASE_URL + \"auth/jwt/refresh/\",\n  //   method: \"POST\",\n  //   auth: false,\n  //   body: {\n  //     refresh: authService.currentUserValue.refresh,\n  //   },\n  // };\n  // fetchCall(payload).then((response) => {\n  //   let local = JSON.parse(localStorage.getItem(\"currentUser\"));\n  //   local.access = response.access;\n  //   localStorage.setItem(\"currentUser\", JSON.stringify(local));\n  // });\n\n  return authenticated ? (\n    <Route path={props.path} exact={props.exact}>\n      <props.component {...props} />\n    </Route>\n  ) : (\n    <Redirect to=\"/login\" />\n  );\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { fetchCall } from \"./helpers\";\nimport { Card } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useHistory } from \"react-router\";\n\n/* will prob need userid in props */\nexport default function AddDeck(props) {\n  const history = useHistory();\n  const initialValues = {\n    deck_name: \"\",\n    deck_description: \"\",\n  };\n  const requiredMsg = \"This field is required!!\";\n\n  async function handleSubmit(fields) {\n    console.log(\n      `create deck handle submit: props i was passed are: ${JSON.stringify(\n        fields\n      )}`\n    );\n    const { deck_name, deck_description } = fields;\n    try {\n      let payload = {\n        url: process.env.REACT_APP_BASE_URL + \"api/decks/\",\n        method: \"POST\",\n        auth: true,\n        body: {\n          deck_name: deck_name,\n          deck_description: deck_description,\n        },\n      };\n      let response = await fetchCall(payload);\n      console.log(\n        `the response from create deck is ${JSON.stringify(response)}`\n      );\n      let userDeckPayload = {\n        url: process.env.REACT_APP_BASE_URL + \"api/userdecks/\",\n        method: \"POST\",\n        auth: true,\n        body: {\n          user_id: props.userId,\n          deck_id: response.id,\n        },\n      };\n      console.log(\n        \"the payload i'm sending to api/userdecks/ is:\",\n        userDeckPayload\n      );\n      let userDeckResponse = await fetchCall(userDeckPayload);\n      console.log(`userdeck response is ${JSON.stringify(userDeckResponse)}`);\n      /* this will be rendered as a subcomponent in /profile... so after\n       * the deck is created, just refresh the page? */\n      props.deckCallback();\n      history.push(\"/temp\");\n      history.goBack();\n      return;\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>\n            Create New Deck\n          </Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Name your new deck and give a description!\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              deck_name: Yup.string().required(requiredMsg),\n              deck_description: Yup.string().required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"deck_name\">Deck Name</label>\n                  <Field\n                    name=\"deck_name\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.deck_name && touched.deck_name\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"deck_name\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"deck_description\">Deck Description</label>\n                  <Field\n                    name=\"deck_description\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.deck_description && touched.deck_description\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"deck_description\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Create Deck!\n                  </button>\n                  <button\n                    onClick={() => {\n                      props.deckCallback();\n                    }}\n                    type=\"reset\"\n                    className=\"btn btn-secondary\"\n                  >\n                    Hide\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Card, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\n\n/* need deck id in props */\nexport default function CreateCard(props) {\n  const [decks, setDecks] = useState([]);\n  const initialValues = {\n    question: \"\",\n    answer: \"\",\n  };\n  const requiredMsg = \"This field is required!!\";\n  const [selectedDeck, setSelectedDeck] = useState({\n    deck_name: \"Select Deck!\",\n  });\n\n  useEffect(() => {\n    /* get all the user's deck info */\n    setSelectedDeck({\n      deck_name: \"Select Deck!\",\n    });\n    async function fetchData() {\n      let payload = {\n        url: process.env.REACT_APP_BASE_URL + `api/decks/`,\n        method: \"GET\",\n        auth: true,\n      };\n      try {\n        let response = await fetchCall(payload);\n        console.log(`full list of decks is ${JSON.stringify(response)}`);\n        let fullDecks = [];\n        for (const element of response) {\n          let obj = props.decks.find((object) => object.deck_id === element.id);\n          if (obj !== undefined) {\n            let toAdd = {\n              id: obj.id,\n              deck_id: obj.deck_id,\n              user_id: obj.user_id,\n              deck_name: element.deck_name,\n              deck_description: element.deck_description,\n            };\n            fullDecks.push(toAdd);\n          }\n        }\n        setDecks(fullDecks);\n        return;\n      } catch (err) {\n        console.error(err);\n        return;\n        /* logout??? */\n      }\n    }\n    fetchData();\n  }, []);\n\n  async function handleSubmit(fields) {\n    if (selectedDeck.deck_name === \"Select Deck!\") {\n      alert(\"please select (or create) a deck first!\");\n      return;\n    }\n    console.log(\n      `create card handle submit: props i was passed are: ${JSON.stringify(\n        fields\n      )}`\n    );\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"api/cards/\",\n      method: \"POST\",\n      auth: true,\n      body: {\n        question: fields.question,\n        answer: fields.answer,\n        user_deck_id: selectedDeck.id,\n        next_time_to_show: \"2020-10-12T00:00\",\n      },\n    };\n    try {\n      let response = await fetchCall(payload);\n      console.log(\n        `card creation request response is : ${JSON.stringify(response)}`\n      );\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n  }\n\n  const deckDropdown = [];\n  decks.forEach((deck, index) => {\n    deckDropdown.push(\n      <Dropdown.Item\n        as=\"button\"\n        key={index}\n        onClick={(e) => setSelectedDeck(deck)}\n      >{`${deck.deck_name} - ${deck.deck_description}`}</Dropdown.Item>\n    );\n  });\n\n  // function handleSelect(event) {\n  //   setSelectedDeck(decks.find((object) => object.id === event.id));\n  // }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>\n            Create Flashcard\n          </Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Give us a question and an answer\n          </Card.Subtitle>\n          <DropdownButton\n            id=\"dropdown-basic-button\"\n            title={`${selectedDeck.deck_name}`}\n            // onSelect={handleSelect}\n          >\n            {deckDropdown}\n          </DropdownButton>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              question: Yup.string().required(requiredMsg),\n              answer: Yup.string().required(requiredMsg),\n            })}\n            onSubmit={(fields, actions) => {\n              handleSubmit(fields);\n              actions.resetForm({ fields: { question: \"\", answer: \"\" } });\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"question\">Question</label>\n                  <Field\n                    as=\"textarea\"\n                    name=\"question\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.question && touched.question ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"question\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"answer\">Answer</label>\n                  <Field\n                    as=\"textarea\"\n                    name=\"answer\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.answer && touched.answer ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"answer\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Create Card!\n                  </button>\n                  <button\n                    onClick={() => {\n                      props.cardCallback();\n                    }}\n                    type=\"reset\"\n                    className=\"btn btn-secondary\"\n                  >\n                    Hide\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { useHistory, useLocation } from \"react-router\";\nimport AddDeck from \"./add-deck\";\nimport CreateCard from \"./create-card\";\nimport { fetchCall } from \"./helpers\";\n\n// const sampleDecks = [\n//   { id: 13, user_id: 4, deck_id: 8 },\n//   { id: 12, user_id: 4, deck_id: 9 },\n// ];\n\nexport default function Profile() {\n  const history = useHistory();\n  const location = useLocation();\n  const [decks, setDecks] = useState([]);\n  const [addingDeck, setAddingDeck] = useState(false);\n  const [addingCard, setAddingCard] = useState(false);\n  const [selectedDeck, setSelectedDeck] = useState({ deck_name: \"My Decks\" });\n\n  useEffect(() => {\n    /* on component load, fetch user's decks from backend, add to state */\n    // alert(\"fetch user's decks\");\n    /* temporary */\n    setAddingCard(false);\n    setAddingDeck(false);\n    async function fetchData() {\n      let payload = {\n        url:\n          process.env.REACT_APP_BASE_URL +\n          `api/userdecks/user_list/?user=${location.state.id}`,\n        method: \"GET\",\n        auth: true,\n      };\n      let deckPayload = {\n        url: process.env.REACT_APP_BASE_URL + \"api/decks/\",\n        method: \"GET\",\n        auth: true,\n      };\n      try {\n        let response = await fetchCall(payload);\n        console.log(\n          \"response received from userdecks/user_list/\",\n          JSON.stringify(response)\n        );\n        let deckResponse = await fetchCall(deckPayload);\n        let fullDecks = [];\n        for (const element of deckResponse) {\n          let obj = response.find((object) => object.deck_id === element.id);\n          if (obj !== undefined) {\n            let toAdd = {\n              id: obj.id,\n              deck_id: obj.deck_id,\n              user_id: obj.user_id,\n              deck_name: element.deck_name,\n              deck_description: element.deck_description,\n            };\n            fullDecks.push(toAdd);\n          }\n        }\n        setDecks(fullDecks);\n      } catch (err) {\n        console.error(err);\n        /* logout??? */\n      }\n    }\n    fetchData();\n  }, []);\n\n  function deckCallback() {\n    setAddingDeck(false);\n  }\n\n  function cardCallback() {\n    setAddingCard(false);\n  }\n\n  const deckDropdown = [];\n  decks.forEach((deck, index) => {\n    deckDropdown.push(\n      <Dropdown.Item\n        as=\"button\"\n        key={index}\n        onClick={(e) => setSelectedDeck(deck)}\n      >{`${deck.deck_name} - ${deck.deck_description}`}</Dropdown.Item>\n    );\n  });\n\n  function handleClick() {\n    history.push({\n      pathname: \"/rundeck\",\n      state: { user_deck_id: selectedDeck.id, user_id: location.state.id },\n    });\n\n    return;\n  }\n\n  /* i need to pass all of the userdeck ids to the create card component, then\n   * do a dropdown to select the deck */\n  return (\n    <>\n      <h1>Create</h1>\n      {!addingDeck && (\n        <Button\n          onClick={() => {\n            setAddingDeck(true);\n          }}\n        >\n          Create a New Deck!\n        </Button>\n      )}\n      {!addingCard && (\n        <Button\n          onClick={() => {\n            setAddingCard(true);\n          }}\n        >\n          Create Flashcard!\n        </Button>\n      )}\n      {addingDeck && (\n        <AddDeck userId={location.state.id} deckCallback={deckCallback} />\n      )}\n      {addingCard && <CreateCard cardCallback={cardCallback} decks={decks} />}\n      <h1>Learn</h1>\n      <DropdownButton\n        id=\"dropdown-basic-button\"\n        title={`${selectedDeck.deck_name}`}\n      >\n        {deckDropdown}\n      </DropdownButton>\n      <br />\n      {selectedDeck.deck_name !== \"My Decks\" && (\n        <Button\n          variant=\"success\"\n          onClick={handleClick}\n        >{`Run deck: ${selectedDeck.deck_name}`}</Button>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\r\nimport { Container, Button, Row, Col } from \"react-bootstrap\";\r\n\r\nexport default function RateCard(props) {\r\n  function handleClick(rating) {\r\n    props.handleRate(rating);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Button\r\n              variant=\"success\"\r\n              onClick={() => {\r\n                handleClick(\"easy\");\r\n              }}\r\n            >\r\n              Easy - 7 Days\r\n            </Button>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Button\r\n              variant=\"warning\"\r\n              onClick={() => {\r\n                handleClick(\"medium\");\r\n              }}\r\n            >\r\n              Medium - 7 Hours\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={() => {\r\n                handleClick(\"hard\");\r\n              }}\r\n            >\r\n              Hard -  7 Minutes\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport ReactCardFlip from \"react-card-flip\";\nimport RateCard from \"./rate-card\";\n\n/* props should contain question: string, answer: string, card_id: num */\nexport default function CardDisplay(props) {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [rating, setRating] = useState(\"\");\n\n  function handleClick(event) {\n    event.preventDefault();\n    setIsFlipped(!isFlipped);\n  }\n\n  function handleRate(rating) {\n    setRating(rating);\n    setIsFlipped(false);\n    props.nextCard();\n    /* here, need to make API call to set the next display time of the current card */\n  }\n\n  return (\n    <>\n      <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\n        <a\n          style={{ cursor: \"pointer\" }}\n          onClick={(event) => {\n            handleClick(event);\n          }}\n        >\n          <Card>\n            <Card.Body\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                height: \"420px\",\n              }}\n            >\n              <Card.Text style={{ flex: \"1\" }}>{props.question}</Card.Text>\n            </Card.Body>\n          </Card>\n        </a>\n        <a\n          style={{ cursor: \"pointer\" }}\n          onClick={(event) => {\n            handleClick(event);\n          }}\n        >\n          <Card>\n            <Card.Body\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                height: \"420px\",\n              }}\n            >\n              <Card.Text style={{ flex: \"1\" }}>{props.answer}</Card.Text>\n            </Card.Body>\n          </Card>\n        </a>\n      </ReactCardFlip>\n      {isFlipped && <RateCard handleRate={handleRate} />}\n    </>\n  );\n}\n","import React from \"react\";\n\n/* props must include total number of cards in deck and current card */\nexport default function DeckInfo(props) {\n  const numCards = props.numCards;\n  const cardIndex = props.cardIndex;\n\n  return <h5>{`Flashcard ${cardIndex + 1} of ${numCards}`}</h5>;\n}\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport CardDisplay from \"./card-display\";\r\nimport DeckInfo from \"./deck-info\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { fetchCall } from \"./helpers\";\r\n\r\n// const sampleDeck = [\r\n//   { question: \"2+2=\", answer: \"4\" },\r\n//   { question: \"2+3=\", answer: \"5\" },\r\n//   { question: \"2+4=\", answer: \"6\" },\r\n//   { question: \"2+5=\", answer: \"7\" },\r\n//   { question: \"2+6=\", answer: \"8\" },\r\n//   { question: \"2+7=\", answer: \"9\" },\r\n//   { question: \"2+8=\", answer: \"10\" },\r\n// ];\r\n\r\n/* props should contain either the deck card data itself or the deck_id */\r\nexport default function RunDeck() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [cardIndex, setCardIndex] = useState(0);\r\n  const user_deck_id = location.state.user_deck_id;\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let payload = {\r\n        url:\r\n          process.env.REACT_APP_BASE_URL +\r\n          `api/userdecks/card_list/?userdeck=${user_deck_id}`,\r\n        method: \"GET\",\r\n        auth: true,\r\n      };\r\n      let response = await fetchCall(payload);\r\n      console.log(\r\n        `returned list of cards for deck with user_deck_id=${user_deck_id} is: ${JSON.stringify(\r\n          response\r\n        )}`\r\n      );\r\n      setCards(response);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  /* increases cardIndex to display the next card in deck */\r\n  function nextCard() {\r\n    console.log(`i'm calling nextcard`);\r\n    if (cardIndex !== cards.length - 1) {\r\n      setCardIndex(cardIndex + 1);\r\n    } else {\r\n      setCardIndex(-1);\r\n    }\r\n  }\r\n\r\n  function redirectHome() {\r\n    history.push({\r\n      pathname: \"/profile\",\r\n      state: { user_id: location.state.user_id },\r\n    });\r\n    return;\r\n  }\r\n\r\n  /* need to pass CardDisplay userid, deckid, etc.. */\r\n  return (\r\n    <>\r\n      {cards.length > 0 && cardIndex !== -1 ? (\r\n        <>\r\n          <DeckInfo numCards={cards.length} cardIndex={cardIndex} />\r\n          <CardDisplay\r\n            index={cardIndex}\r\n            question={cards[cardIndex].question}\r\n            answer={cards[cardIndex].answer}\r\n            nextCard={nextCard}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h5>Nice work!</h5>\r\n          <Button onClick={redirectHome}>Back to My Decks</Button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport LandingPage from \"./components/landing\";\nimport NavBar from \"./components/navbar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Register from \"./components/register\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Login from \"./components/login\";\nimport PrivateRoute from \"./components/protected-route\";\nimport Profile from \"./components/profile\";\nimport RunDeck from \"./components/run-deck\";\nimport CreateCard from \"./components/create-card\";\nimport AddDeck from \"./components/add-deck\";\n\nfunction App() {\n  \n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n      />\n      <Router>\n        <NavBar />\n        <Container\n          className=\"center\"\n          fluid=\"md\"\n          style={{ textAlign: \"center\", marginTop: \"10%\" }}\n        >\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <PrivateRoute exact path=\"/rundeck\" component={RunDeck} />\n            <PrivateRoute exact path=\"/profile\" component={Profile} />\n            <PrivateRoute exact path=\"/createcard\" component={CreateCard} />\n            <PrivateRoute exact path=\"/createdeck\" component={AddDeck} />\n          </Switch>\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}