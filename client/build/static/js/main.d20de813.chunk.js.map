{"version":3,"sources":["components/landing.js","components/auth-service.js","components/navbar.js","components/helpers.js","components/register.js","components/login.js","components/protected-route.js","components/profile.js","components/card-display.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","Container","className","fluid","style","display","flexDirection","justifyContent","marginTop","Card","width","flex","marginLeft","marginRight","Body","Title","Text","Button","variant","currentUserSubject","BehaviorSubject","JSON","parse","localStorage","getItem","authService","login","logout","authHeader","newUser","res","refresh","access","setItem","stringify","next","updateUserData","currentUser","asObservable","value","userData","a","clear","currentUserValue","accessToken","Authorization","NavBar","history","useHistory","useState","setCurrentUser","useLocation","useEffect","subscription","subscribe","user","unsubscribe","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","eventKey","username","onClick","push","fetchCall","payload","fetch","url","method","auth","body","headers","response","status","json","Register","requiredMsg","fields","console","log","alert","email","password","process","REACT_APP_BASE_URL","jwtresponse","Header","fontSize","Subtitle","initialValues","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","handleSubmit","render","errors","touched","htmlFor","name","type","component","Login","error","PrivateRoute","props","authenticated","Date","jwt_decode","exp","then","local","path","exact","to","Profile","CardDisplay","isFlipped","setIsFlipped","handleClick","event","preventDefault","flipDirection","cursor","alignItems","height","App","position","autoClose","hideProgressBar","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d20de813.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Container, Button } from \"react-bootstrap\";\n\nfunction LandingPage() {\n  return (\n    <>\n      <Container\n        className=\"center\"\n        fluid=\"md\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          marginTop: \"20%\",\n        }}\n      >\n        <head>\n          <title>Spaced Flashcards Project - OSU Winter Hackathon 2020</title>\n        </head>\n        <h1>Spaced Flashcards</h1>\n\n        <Card\n          style={{\n            width: \"50%\",\n            flex: \"1\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n          }}\n        >\n          <Card.Body>\n            <Card.Title>A Proven System</Card.Title>\n            <Card.Text>\n              Research shows that spaced repetition is an extremely effective\n              strategy for memory retention and learning. What topic would you\n              like to know more completely?\n            </Card.Text>\n            <Button style={{ marginRight: \"25px\" }} variant=\"primary\">\n              Login\n            </Button>\n            <Button variant=\"primary\">Register in Seconds</Button>\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n}\n\nexport default LandingPage;\n","import { BehaviorSubject } from \"rxjs\";\n\nconst currentUserSubject = new BehaviorSubject(\n  JSON.parse(localStorage.getItem(\"currentUser\"))\n);\n\n/* methods provided by the authentication service */\nexport const authService = {\n  login,\n  logout,\n  authHeader,\n  newUser,\n  updateUserData,\n  currentUser: currentUserSubject.asObservable(),\n  get currentUserValue() {\n    return currentUserSubject.value;\n  },\n};\n\n/* store userData in local storage and update authentication state by\n * pushing to the observable */\nasync function login(userData) {\n  localStorage.setItem(\"currentUser\", JSON.stringify(userData));\n  currentUserSubject.next(userData);\n}\n\n/* log user out: clear localStorage and push null to observable */\nfunction logout() {\n  localStorage.clear();\n  currentUserSubject.next(null);\n}\n\n/* re-authenticate user (refresh jwt) */\n/* TODO */\nasync function updateUserData() {\n  return;\n}\n\n/* if new user has registered, logs them in and sets state */\nfunction newUser(res) {\n  if (!res.refresh || !res.access) {\n    /* should not be possible */\n    return logout();\n  }\n  localStorage.setItem(\"currentUser\", JSON.stringify(res));\n  currentUserSubject.next(res);\n}\n\n/* returns HTTP authorization header containing JWT of currently logged-in\n * user, otherwise empty object if user not logged in */\nasync function authHeader() {\n  const currentUser = authService.currentUserValue;\n  if (currentUser && currentUser.accessToken) {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `JWT ${currentUser.accessToken}`,\n    };\n  } else {\n    return {};\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nimport { useLocation } from \"react-router\";\nimport { authService } from \"./auth-service\";\nimport {useHistory} from 'react-router-dom';\n\nexport default function NavBar() {\n  const history = useHistory();\n  const [currentUser, setCurrentUser] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const subscription = authService.currentUser.subscribe((user) =>\n      setCurrentUser(user)\n    );\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [currentUser]);\n\n  function logoutHelper() {\n    authService.logout();\n    history.push(\"/\");\n\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/\">Spaced Flashcards</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav variant=\"pills\" className=\"mr-auto\">\n            <Nav.Link eventKey=\"1\" href=\"/decks\">\n              My Decks\n            </Nav.Link>\n            <Nav.Link eventKey=\"2\" href=\"/search\">\n              Search Decks\n            </Nav.Link>\n          </Nav>\n          {!currentUser ? (\n            <Nav variant=\"pills\">\n              <Nav.Link eventKey=\"3\" href=\"/login\">\n                Login\n              </Nav.Link>\n              <Nav.Link eventKey=\"4\" href=\"/register\">\n                Register\n              </Nav.Link>\n            </Nav>\n          ) : (\n            <>\n              <p>{`welcome back, ${currentUser.userData.username}`}</p>\n              <Button onClick={logoutHelper}>Logout!</Button>\n            </>\n          )}\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n","import { authService } from \"./auth-service\";\n\n/* general configurable helper function to send POST requests to the server */\nexport async function fetchCall(payload) {\n    let response = await fetch(payload.url, {\n      method: payload.method,\n      headers: payload.auth\n        ? await authService.authHeader()\n        : { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload.body),\n    });\n    if (response.status >= 400) {\n        /* TODO: error handle */\n    } else {\n      return await response.json();\n    }\n  }","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Register() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    alert(`submit registration data to backend: ${JSON.stringify(fields)}`);\n    const { email, username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        email: email,\n        password: password,\n      },\n    };\n    let response = await fetchCall(payload);\n    console.log(\n      `response to register user call is: ${JSON.stringify(response)}`\n    );\n\n    /* now that user has been created, get the jwt */\n    payload.url = process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\";\n    let jwtresponse = await fetchCall(payload);\n    jwtresponse.userData = { username, email };\n    console.log(`response to jwt call is: ${JSON.stringify(jwtresponse)}`);\n    authService.newUser(jwtresponse);\n    history.push(\"/profile\");\n\n    return;\n  }\n\n  console.log(`the base url is: ${process.env.REACT_APP_BASE_URL}`);\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Register</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Begin learning today by creating an account and joining the Spaced\n            Flashcards community! Just give us some basic information...\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              email: Yup.string()\n                .email(\"Email is invalid!!\")\n                .required(requiredMsg),\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n              confirmPassword: Yup.string()\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    name=\"email\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.email && touched.email ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                  <Field\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.confirmPassword && touched.confirmPassword\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"confirmPassword\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Register\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    alert(`submit login data to backend: ${JSON.stringify(fields)}`);\n    const { username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        password: password,\n      },\n    };\n    try {\n      let response = await fetchCall(payload);\n      response.userData = { username };\n      console.log(`response to login call is ${JSON.stringify(response)}`);\n      authService.login(response);\n      history.push(\"/profile\");\n      return;\n    } catch (err) {\n      /* todo: error handling */\n      console.error(err);\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Login</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Login to access your decks and reinfornce your knowledge\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Login\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { authService } from \"./auth-service\";\nimport jwt_decode from \"jwt-decode\";\nimport { fetchCall } from \"./helpers\";\n\n/* TODO: this needs to refresh the jwt token */\nconst PrivateRoute = (props) => {\n  const authenticated =\n    !localStorage.getItem(\"currentUser\") || !authService.currentUserValue\n      ? false\n      : !(\n          new Date(\n            1000 * jwt_decode(authService.currentUserValue.refresh).exp\n          ) > new Date()\n        )\n      ? false\n      : true;\n  if (!authenticated) {\n    console.log(\"trying to log this guy out\");\n    authService.logout();\n    return <Redirect to=\"/login\" />;\n  }\n  /* refresh the token */\n  /* get the localstorage data */\n  let payload = {\n    url: process.env.REACT_APP_BASE_URL + \"auth/jwt/refresh/\",\n    method: \"POST\",\n    auth: false,\n    body: {\n      refresh: authService.currentUserValue.refresh,\n    },\n  };\n  fetchCall(payload).then((response) => {\n    let local = JSON.parse(localStorage.getItem(\"currentUser\"));\n    local.access = response.access;\n    localStorage.setItem(\"currentUser\", JSON.stringify(local));\n  });\n\n  return authenticated ? (\n    <Route path={props.path} exact={props.exact}>\n      <props.component {...props} />\n    </Route>\n  ) : (\n    <Redirect to=\"/login\" />\n  );\n};\n\nexport default PrivateRoute;\n","import React from 'react';\n\nexport default function Profile() {\n    return(\n        <>\n        <h1>profile page... protected!</h1>\n        </>\n    )\n}","import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport ReactCardFlip from \"react-card-flip\";\n\nexport default function CardDisplay(props) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  function handleClick(event) {\n    event.preventDefault();\n    setIsFlipped(!isFlipped);\n  }\n\n  return (\n    <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\n      <a style={{ cursor: \"pointer\" }} onClick={handleClick}>\n        <Card>\n          <Card.Body\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              height: \"420px\",\n            }}\n          >\n            <Card.Text style={{ flex: \"1\" }}>Question!!!!!</Card.Text>\n          </Card.Body>\n        </Card>\n      </a>\n      <a style={{ cursor: \"pointer\" }} onClick={handleClick}>\n        <Card>\n          <Card.Body\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              height: \"420px\",\n            }}\n          >\n            <Card.Text style={{ flex: \"1\" }}>Answer!!!</Card.Text>\n          </Card.Body>\n        </Card>\n      </a>\n    </ReactCardFlip>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Button, Container } from \"react-bootstrap\";\nimport LandingPage from \"./components/landing\";\nimport NavBar from \"./components/navbar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Register from \"./components/register\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Login from \"./components/login\";\nimport { authService } from \"./components/auth-service\";\nimport PrivateRoute from \"./components/protected-route\";\nimport Profile from \"./components/profile\";\nimport CardDisplay from \"./components/card-display\";\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n      />\n      <Router>\n        <NavBar />\n        <Container\n          className=\"center\"\n          fluid=\"md\"\n          style={{ textAlign: \"center\", marginTop: \"10%\" }}\n        >\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/card\" component={CardDisplay} />\n            <PrivateRoute exact path=\"/profile\" component={Profile} />\n          </Switch>\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}