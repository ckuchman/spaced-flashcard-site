{"version":3,"sources":["components/landing.js","components/auth-service.js","components/navbar.js","components/helpers.js","components/register.js","components/login.js","components/protected-route.js","components/profile.js","components/rate-card.js","components/card-display.js","components/deck-info.js","components/run-deck.js","components/create-card.js","components/add-deck.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","history","useHistory","Container","className","fluid","style","display","flexDirection","justifyContent","marginTop","Card","width","flex","marginLeft","marginRight","Body","Title","Text","Button","onClick","push","variant","currentUserSubject","BehaviorSubject","JSON","parse","localStorage","getItem","authService","login","logout","authHeader","newUser","res","refresh","access","setItem","stringify","next","updateUserData","currentUser","asObservable","value","userData","a","clear","currentUserValue","Authorization","NavBar","useState","setCurrentUser","useLocation","useEffect","subscription","subscribe","user","unsubscribe","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","eventKey","username","fetchCall","payload","fetch","url","method","auth","body","headers","response","status","json","Register","requiredMsg","fields","console","log","alert","email","password","process","jwtresponse","pathname","state","Header","fontSize","Subtitle","initialValues","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","handleSubmit","render","errors","touched","htmlFor","name","type","component","Login","idPayload","idResponse","error","toast","goBack","PrivateRoute","props","authenticated","Date","jwt_decode","exp","then","local","path","exact","to","Profile","RateCard","handleClick","rating","handleRate","Row","Col","CardDisplay","isFlipped","setIsFlipped","setRating","event","preventDefault","flipDirection","cursor","alignItems","height","question","answer","nextCard","DeckInfo","numCards","cardIndex","sampleDeck","RunDeck","setCardIndex","length","index","CreateCard","as","AddDeck","deck_name","deck_description","App","position","autoClose","hideProgressBar","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.942295fd.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, Container, Button } from \"react-bootstrap\";\n\nfunction LandingPage() {\n  const history = useHistory();\n\n  function handleRegister() {\n    history.push(\"/register\");\n    return;\n  }\n\n  function handleLogin() {\n    history.push(\"/login\");\n    return;\n  }\n\n  return (\n    <>\n      <Container\n        className=\"center\"\n        fluid=\"md\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          marginTop: \"20%\",\n        }}\n      >\n        <head>\n          <title>Spaced Flashcards Project - OSU Winter Hackathon 2020</title>\n        </head>\n        <h1>Spaced Flashcards</h1>\n\n        <Card\n          style={{\n            width: \"50%\",\n            flex: \"1\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n          }}\n        >\n          <Card.Body>\n            <Card.Title>A Proven System</Card.Title>\n            <Card.Text>\n              Research shows that spaced repetition is an extremely effective\n              strategy for memory retention and learning. What topic would you\n              like to know more completely?\n            </Card.Text>\n            <Button\n              onClick={handleLogin}\n              style={{ marginRight: \"25px\" }}\n              variant=\"primary\"\n            >\n              Login\n            </Button>\n            <Button onClick={handleRegister} variant=\"primary\">\n              Register in Seconds\n            </Button>\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n}\n\nexport default LandingPage;\n","import { BehaviorSubject } from \"rxjs\";\n\nconst currentUserSubject = new BehaviorSubject(\n  JSON.parse(localStorage.getItem(\"currentUser\"))\n);\n\n/* methods provided by the authentication service */\nexport const authService = {\n  login,\n  logout,\n  authHeader,\n  newUser,\n  updateUserData,\n  currentUser: currentUserSubject.asObservable(),\n  get currentUserValue() {\n    return currentUserSubject.value;\n  },\n};\n\n/* store userData in local storage and update authentication state by\n * pushing to the observable */\nasync function login(userData) {\n  localStorage.setItem(\"currentUser\", JSON.stringify(userData));\n  currentUserSubject.next(userData);\n}\n\n/* log user out: clear localStorage and push null to observable */\nfunction logout() {\n  localStorage.clear();\n  currentUserSubject.next(null);\n}\n\n/* re-authenticate user (refresh jwt) */\n/* TODO */\nasync function updateUserData() {\n  return;\n}\n\n/* if new user has registered, logs them in and sets state */\nfunction newUser(res) {\n  if (!res.refresh || !res.access) {\n    /* should not be possible */\n    return logout();\n  }\n  localStorage.setItem(\"currentUser\", JSON.stringify(res));\n  currentUserSubject.next(res);\n}\n\n/* returns HTTP authorization header containing JWT of currently logged-in\n * user, otherwise empty object if user not logged in */\nasync function authHeader() {\n  const currentUser = authService.currentUserValue;\n  if (currentUser && currentUser.access) {\n    return {\n      \"Content-Type\": \"application/json\",\n      Authorization: `JWT ${currentUser.access}`,\n    };\n  } else {\n    return {};\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nimport { useLocation } from \"react-router\";\nimport { authService } from \"./auth-service\";\nimport {useHistory} from 'react-router-dom';\n\nexport default function NavBar() {\n  const history = useHistory();\n  const [currentUser, setCurrentUser] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const subscription = authService.currentUser.subscribe((user) =>\n      setCurrentUser(user)\n    );\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [currentUser]);\n\n  function logoutHelper() {\n    authService.logout();\n    history.push(\"/\");\n\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/\">Spaced Flashcards</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav variant=\"pills\" className=\"mr-auto\">\n            <Nav.Link eventKey=\"1\" href=\"/decks\">\n              My Decks\n            </Nav.Link>\n            <Nav.Link eventKey=\"2\" href=\"/search\">\n              Search Decks\n            </Nav.Link>\n          </Nav>\n          {!currentUser ? (\n            <Nav variant=\"pills\">\n              <Nav.Link eventKey=\"3\" href=\"/login\">\n                Login\n              </Nav.Link>\n              <Nav.Link eventKey=\"4\" href=\"/register\">\n                Register\n              </Nav.Link>\n            </Nav>\n          ) : (\n            <>\n              <p>{`welcome back, ${currentUser.userData.username}`}</p>\n              <Button onClick={logoutHelper}>Logout!</Button>\n            </>\n          )}\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n","import { authService } from \"./auth-service\";\n\n/* general configurable helper function to send POST requests to the server */\nexport async function fetchCall(payload) {\n    let response = await fetch(payload.url, {\n      method: payload.method,\n      headers: payload.auth\n        ? await authService.authHeader()\n        : { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload.body),\n    });\n    if (response.status >= 400) {\n        /* TODO: error handle */\n    } else {\n      return await response.json();\n    }\n  }","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Register() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    alert(`submit registration data to backend: ${JSON.stringify(fields)}`);\n    const { email, username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        email: email,\n        password: password,\n      },\n    };\n    let response = await fetchCall(payload);\n    console.log(\n      `response to register user call is: ${JSON.stringify(response)}`\n    );\n\n    /* now that user has been created, get the jwt */\n    payload.url = process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\";\n    let jwtresponse = await fetchCall(payload);\n    jwtresponse.userData = { username, email };\n    console.log(`response to jwt call is: ${JSON.stringify(jwtresponse)}`);\n    authService.newUser(jwtresponse);\n    history.push({\n      pathname: \"/profile\",\n      state: response,\n    });\n\n    return;\n  }\n\n  console.log(`the base url is: ${process.env.REACT_APP_BASE_URL}`);\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Register</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Begin learning today by creating an account and joining the Spaced\n            Flashcards community! Just give us some basic information...\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              email: Yup.string()\n                .email(\"Email is invalid!!\")\n                .required(requiredMsg),\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n              confirmPassword: Yup.string()\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    name=\"email\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.email && touched.email ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                  <Field\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.confirmPassword && touched.confirmPassword\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"confirmPassword\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Register\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    // alert(`submit login data to backend: ${JSON.stringify(fields)}`);\n    const { username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        password: password,\n      },\n    };\n    try {\n      let response = await fetchCall(payload);\n      response.userData = { username };\n      console.log(`response to login call is ${JSON.stringify(response)}`);\n      authService.login(response);\n      /* now fetch the userId */\n      console.log(authService.currentUserValue);\n      let idPayload = {\n        url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n        method: \"GET\",\n        auth: true,\n      };\n      let idResponse = await fetchCall(idPayload);\n      console.log(\n        `the response from getting id is: ${JSON.stringify(idResponse)}`\n      );\n      history.push({\n        pathname: \"/profile\",\n        state: idResponse[0],\n      });\n      return;\n    } catch (err) {\n      /* todo: error handling */\n      console.error(err);\n      toast.error(`Invalid login info, please retry!`);\n      history.push(\"/temp\");\n      history.goBack();\n      return;\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Login</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Login to access your decks and reinfornce your knowledge\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Login\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { authService } from \"./auth-service\";\nimport jwt_decode from \"jwt-decode\";\nimport { fetchCall } from \"./helpers\";\n\n/* TODO: this needs to refresh the jwt token */\nconst PrivateRoute = (props) => {\n  const authenticated =\n    !localStorage.getItem(\"currentUser\") || !authService.currentUserValue\n      ? false\n      : !(\n          new Date(\n            1000 * jwt_decode(authService.currentUserValue.refresh).exp\n          ) > new Date()\n        )\n      ? false\n      : true;\n  if (!authenticated) {\n    console.log(\"trying to log this guy out\");\n    authService.logout();\n    return <Redirect to=\"/login\" />;\n  }\n  /* refresh the token */\n  /* get the localstorage data */\n  let payload = {\n    url: process.env.REACT_APP_BASE_URL + \"auth/jwt/refresh/\",\n    method: \"POST\",\n    auth: false,\n    body: {\n      refresh: authService.currentUserValue.refresh,\n    },\n  };\n  fetchCall(payload).then((response) => {\n    let local = JSON.parse(localStorage.getItem(\"currentUser\"));\n    local.access = response.access;\n    localStorage.setItem(\"currentUser\", JSON.stringify(local));\n  });\n\n  return authenticated ? (\n    <Route path={props.path} exact={props.exact}>\n      <props.component {...props} />\n    </Route>\n  ) : (\n    <Redirect to=\"/login\" />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { useState, useEffect } from 'react';\n\nexport default function Profile() {\n    const [decks, setDecks] = useState([]);\n\n    useEffect(() => {\n        /* on component load, fetch user's decks from backend, add to state */\n        alert(\"fetch user's decks\");\n        return;\n    }, [])\n\n    return(\n        <>\n        <h1>profile page... protected!</h1>\n        </>\n    )\n}","import React from \"react\";\r\nimport { Container, Button, Row, Col } from \"react-bootstrap\";\r\n\r\nexport default function RateCard(props) {\r\n  function handleClick(rating) {\r\n    props.handleRate(rating);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Button\r\n              variant=\"success\"\r\n              onClick={() => {\r\n                handleClick(\"easy\");\r\n              }}\r\n            >\r\n              Easy - 7 Days\r\n            </Button>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Button\r\n              variant=\"warning\"\r\n              onClick={() => {\r\n                handleClick(\"medium\");\r\n              }}\r\n            >\r\n              Medium - 7 Hours\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={() => {\r\n                handleClick(\"hard\");\r\n              }}\r\n            >\r\n              Hard -  7 Minutes\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport ReactCardFlip from \"react-card-flip\";\nimport RateCard from \"./rate-card\";\n\n/* props should contain question: string, answer: string, card_id: num */\nexport default function CardDisplay(props) {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [rating, setRating] = useState(\"\");\n\n  function handleClick(event) {\n    event.preventDefault();\n    setIsFlipped(!isFlipped);\n  }\n\n  function handleRate(rating) {\n    setRating(rating);\n    setIsFlipped(false);\n    props.nextCard();\n    /* here, need to make API call to set the next display time of the current card */\n  }\n\n  return (\n    <>\n      <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\n        <a\n          style={{ cursor: \"pointer\" }}\n          onClick={(event) => {\n            handleClick(event);\n          }}\n        >\n          <Card>\n            <Card.Body\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                height: \"420px\",\n              }}\n            >\n              <Card.Text style={{ flex: \"1\" }}>{props.question}</Card.Text>\n            </Card.Body>\n          </Card>\n        </a>\n        <a\n          style={{ cursor: \"pointer\" }}\n          onClick={(event) => {\n            handleClick(event);\n          }}\n        >\n          <Card>\n            <Card.Body\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                height: \"420px\",\n              }}\n            >\n              <Card.Text style={{ flex: \"1\" }}>{props.answer}</Card.Text>\n            </Card.Body>\n          </Card>\n        </a>\n      </ReactCardFlip>\n      {isFlipped && <RateCard handleRate={handleRate} />}\n    </>\n  );\n}\n","import React from \"react\";\n\n/* props must include total number of cards in deck and current card */\nexport default function DeckInfo(props) {\n  const numCards = props.numCards;\n  const cardIndex = props.cardIndex;\n\n  return <h5>{`Flashcard ${cardIndex + 1} of ${numCards}`}</h5>;\n}\n","import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport CardDisplay from \"./card-display\";\r\nimport DeckInfo from \"./deck-info\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst sampleDeck = [\r\n  { question: \"2+2=\", answer: \"4\" },\r\n  { question: \"2+3=\", answer: \"5\" },\r\n  { question: \"2+4=\", answer: \"6\" },\r\n  { question: \"2+5=\", answer: \"7\" },\r\n  { question: \"2+6=\", answer: \"8\" },\r\n  { question: \"2+7=\", answer: \"9\" },\r\n  { question: \"2+8=\", answer: \"10\" },\r\n];\r\n\r\n/* props should contain either the deck card data itself or the deck_id */\r\nexport default function RunDeck() {\r\n  let history = useHistory();\r\n  const [cardIndex, setCardIndex] = useState(0);\r\n\r\n  /* increases cardIndex to display the next card in deck */\r\n  function nextCard() {\r\n    console.log(`i'm calling nextcard`);\r\n    if (cardIndex !== sampleDeck.length - 1) {\r\n      setCardIndex(cardIndex + 1);\r\n    } else {\r\n      setCardIndex(-1);\r\n    }\r\n  }\r\n\r\n  function redirectHome() {\r\n    history.push(\"/profile\");\r\n    return;\r\n  }\r\n\r\n  /* need to pass CardDisplay userid, deckid, etc.. */\r\n  return (\r\n    <>\r\n      {cardIndex !== -1 ? (\r\n        <>\r\n          <DeckInfo numCards={sampleDeck.length} cardIndex={cardIndex} />\r\n          <CardDisplay\r\n            index={cardIndex}\r\n            question={sampleDeck[cardIndex].question}\r\n            answer={sampleDeck[cardIndex].answer}\r\n            nextCard={nextCard}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h5>Nice work!</h5>\r\n          <Button onClick={redirectHome}>Back to My Decks</Button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\n\n/* need deck id in props */\nexport default function CreateCard(props) {\n  const initialValues = {\n    question: \"\",\n    answer: \"\",\n  };\n  const requiredMsg = \"This field is required!!\";\n\n  function handleSubmit(fields) {\n    console.log(\n      `create card handle submit: props i was passed are: ${JSON.stringify(\n        fields\n      )}`\n    );\n    return;\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>\n            Create Flashcard\n          </Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Give us a question and an answer\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              question: Yup.string().required(requiredMsg),\n              answer: Yup.string().required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"question\">Question</label>\n                  <Field\n                    as=\"textarea\"\n                    name=\"question\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.question && touched.question ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"question\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"answer\">Answer</label>\n                  <Field\n                    as=\"textarea\"\n                    name=\"answer\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.answer && touched.answer ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"answer\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Create Card!\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React from \"react\";\nimport { fetchCall } from \"./helpers\";\nimport { Card } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\n/* will prob need userid in props */\nexport default function AddDeck(props) {\n  const initialValues = {\n    deck_name: \"\",\n    deck_description: \"\",\n  };\n  const requiredMsg = \"This field is required!!\";\n\n  function handleSubmit(fields) {\n    console.log(\n      `create deck handle submit: props i was passed are: ${JSON.stringify(\n        fields\n      )}`\n    );\n    const { deck_name, deck_description } = fields;\n    \n    return;\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>\n            Create New Deck\n          </Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Name your new deck and give a description!\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              deck_name: Yup.string().required(requiredMsg),\n              deck_description: Yup.string().required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"deck_name\">Deck Name</label>\n                  <Field\n                    name=\"deck_name\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.deck_name && touched.deck_name\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"deck_name\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"deck_description\">Deck Description</label>\n                  <Field\n                    name=\"deck_description\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.deck_description && touched.deck_description\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"deck_description\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Create Deck!\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Button, Container } from \"react-bootstrap\";\nimport LandingPage from \"./components/landing\";\nimport NavBar from \"./components/navbar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Register from \"./components/register\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Login from \"./components/login\";\nimport { authService } from \"./components/auth-service\";\nimport PrivateRoute from \"./components/protected-route\";\nimport Profile from \"./components/profile\";\nimport CardDisplay from \"./components/card-display\";\nimport RunDeck from \"./components/run-deck\";\nimport CreateCard from \"./components/create-card\";\nimport AddDeck from \"./components/add-deck\";\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n      />\n      <Router>\n        <NavBar />\n        <Container\n          className=\"center\"\n          fluid=\"md\"\n          style={{ textAlign: \"center\", marginTop: \"10%\" }}\n        >\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <PrivateRoute exact path=\"/rundeck\" component={RunDeck} />\n            <PrivateRoute exact path=\"/profile\" component={Profile} />\n            <PrivateRoute exact path=\"/createcard\" component={CreateCard} />\n            <PrivateRoute exact path=\"/createdeck\" component={AddDeck} />\n          </Switch>\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}