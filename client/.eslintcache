[{"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/index.js":"1","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/reportWebVitals.js":"2","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/App.js":"3","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/register.js":"4","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/profile.js":"5","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/landing.js":"6","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/navbar.js":"7","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/protected-route.js":"8","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/auth-service.js":"9","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/login.js":"10","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/card-display.js":"11","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/helpers.js":"12"},{"size":547,"mtime":1608425849637,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1608425849643,"results":"15","hashOfConfig":"14"},{"size":1525,"mtime":1608425849583,"results":"16","hashOfConfig":"14"},{"size":5662,"mtime":1608425849630,"results":"17","hashOfConfig":"14"},{"size":150,"mtime":1608425849622,"results":"18","hashOfConfig":"14"},{"size":1278,"mtime":1608425849609,"results":"19","hashOfConfig":"14"},{"size":1723,"mtime":1608425849617,"results":"20","hashOfConfig":"14"},{"size":1371,"mtime":1608425849626,"results":"21","hashOfConfig":"14"},{"size":1583,"mtime":1608425849594,"results":"22","hashOfConfig":"14"},{"size":3708,"mtime":1608425849613,"results":"23","hashOfConfig":"14"},{"size":1153,"mtime":1608425849599,"results":"24","hashOfConfig":"14"},{"size":539,"mtime":1608425849603,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1pjof45",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/index.js",[],["56","57"],"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/reportWebVitals.js",[],"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/App.js",["58","59"],"import React from \"react\";\nimport \"./App.css\";\nimport { Button, Container } from \"react-bootstrap\";\nimport LandingPage from \"./components/landing\";\nimport NavBar from \"./components/navbar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Register from \"./components/register\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Login from \"./components/login\";\nimport { authService } from \"./components/auth-service\";\nimport PrivateRoute from \"./components/protected-route\";\nimport Profile from \"./components/profile\";\nimport CardDisplay from \"./components/card-display\";\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n      />\n      <Router>\n        <NavBar />\n        <Container\n          className=\"center\"\n          fluid=\"md\"\n          style={{ textAlign: \"center\", marginTop: \"10%\" }}\n        >\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/card\" component={CardDisplay} />\n            <PrivateRoute exact path=\"/profile\" component={Profile} />\n          </Switch>\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/register.js",["60"],"import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Register() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    alert(`submit registration data to backend: ${JSON.stringify(fields)}`);\n    const { email, username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        email: email,\n        password: password,\n      },\n    };\n    let response = await fetchCall(payload);\n    console.log(\n      `response to register user call is: ${JSON.stringify(response)}`\n    );\n\n    /* now that user has been created, get the jwt */\n    payload.url = process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\";\n    let jwtresponse = await fetchCall(payload);\n    jwtresponse.userData = { username, email };\n    console.log(`response to jwt call is: ${JSON.stringify(jwtresponse)}`);\n    authService.newUser(jwtresponse);\n    history.push(\"/profile\");\n\n    return;\n  }\n\n  console.log(`the base url is: ${process.env.REACT_APP_BASE_URL}`);\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Register</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Begin learning today by creating an account and joining the Spaced\n            Flashcards community! Just give us some basic information...\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              email: Yup.string()\n                .email(\"Email is invalid!!\")\n                .required(requiredMsg),\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n              confirmPassword: Yup.string()\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    name=\"email\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.email && touched.email ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                  <Field\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.confirmPassword && touched.confirmPassword\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"confirmPassword\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Register\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/profile.js",[],"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/landing.js",[],"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/navbar.js",["61"],"import React, { useEffect, useState } from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nimport { useLocation } from \"react-router\";\nimport { authService } from \"./auth-service\";\nimport {useHistory} from 'react-router-dom';\n\nexport default function NavBar() {\n  const history = useHistory();\n  const [currentUser, setCurrentUser] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const subscription = authService.currentUser.subscribe((user) =>\n      setCurrentUser(user)\n    );\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [currentUser]);\n\n  function logoutHelper() {\n    authService.logout();\n    history.push(\"/\");\n\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/\">Spaced Flashcards</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav variant=\"pills\" className=\"mr-auto\">\n            <Nav.Link eventKey=\"1\" href=\"/decks\">\n              My Decks\n            </Nav.Link>\n            <Nav.Link eventKey=\"2\" href=\"/search\">\n              Search Decks\n            </Nav.Link>\n          </Nav>\n          {!currentUser ? (\n            <Nav variant=\"pills\">\n              <Nav.Link eventKey=\"3\" href=\"/login\">\n                Login\n              </Nav.Link>\n              <Nav.Link eventKey=\"4\" href=\"/register\">\n                Register\n              </Nav.Link>\n            </Nav>\n          ) : (\n            <>\n              <p>{`welcome back, ${currentUser.userData.username}`}</p>\n              <Button onClick={logoutHelper}>Logout!</Button>\n            </>\n          )}\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/protected-route.js",[],"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/auth-service.js",[],"/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/login.js",["62"],"import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    alert(`submit login data to backend: ${JSON.stringify(fields)}`);\n    const { username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        password: password,\n      },\n    };\n    try {\n      let response = await fetchCall(payload);\n      response.userData = { username };\n      console.log(`response to login call is ${JSON.stringify(response)}`);\n      authService.login(response);\n      history.push(\"/profile\");\n      return;\n    } catch (err) {\n      /* todo: error handling */\n      console.error(err);\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Login</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Login to access your decks and reinfornce your knowledge\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Login\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/card-display.js",["63","64"],"import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport ReactCardFlip from \"react-card-flip\";\n\nexport default function CardDisplay(props) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  function handleClick(event) {\n    event.preventDefault();\n    setIsFlipped(!isFlipped);\n  }\n\n  return (\n    <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\n      <a style={{ cursor: \"pointer\" }} onClick={handleClick}>\n        <Card>\n          <Card.Body\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              height: \"420px\",\n            }}\n          >\n            <Card.Text style={{ flex: \"1\" }}>Question!!!!!</Card.Text>\n          </Card.Body>\n        </Card>\n      </a>\n      <a style={{ cursor: \"pointer\" }} onClick={handleClick}>\n        <Card>\n          <Card.Body\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              height: \"420px\",\n            }}\n          >\n            <Card.Text style={{ flex: \"1\" }}>Answer!!!</Card.Text>\n          </Card.Body>\n        </Card>\n      </a>\n    </ReactCardFlip>\n  );\n}\n","/mnt/c/Users/webnu/Google Drive/Projects/spaced-flashcard-site/client/src/components/helpers.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":3,"column":10,"nodeType":"71","messageId":"72","endLine":3,"endColumn":16},{"ruleId":"69","severity":1,"message":"73","line":11,"column":10,"nodeType":"71","messageId":"72","endLine":11,"endColumn":21},{"ruleId":"69","severity":1,"message":"74","line":3,"column":10,"nodeType":"71","messageId":"72","endLine":3,"endColumn":15},{"ruleId":"69","severity":1,"message":"75","line":10,"column":9,"nodeType":"71","messageId":"72","endLine":10,"endColumn":17},{"ruleId":"69","severity":1,"message":"74","line":3,"column":10,"nodeType":"71","messageId":"72","endLine":3,"endColumn":15},{"ruleId":"76","severity":1,"message":"77","line":15,"column":7,"nodeType":"78","endLine":15,"endColumn":62},{"ruleId":"76","severity":1,"message":"77","line":28,"column":7,"nodeType":"78","endLine":28,"endColumn":62},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'authService' is defined but never used.","'toast' is defined but never used.","'location' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]