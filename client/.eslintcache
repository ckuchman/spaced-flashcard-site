[{"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/index.js":"1","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/App.js":"2","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/reportWebVitals.js":"3","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/navbar.js":"4","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/auth-service.js":"5","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/register.js":"6","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/login.js":"7","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/protected-route.js":"8","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/profile.js":"9","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/card-display.js":"10","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/landing.js":"11","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/helpers.js":"12","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/my-decks.js":"13","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/deck-search.js":"14","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/run-deck.js":"15","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/add-deck.js":"16","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/create-card.js":"17","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/rate-card.js":"18","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/deck-info.js":"19"},{"size":547,"mtime":1608500865699,"results":"20","hashOfConfig":"21"},{"size":2113,"mtime":1608509914208,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1608500865699,"results":"23","hashOfConfig":"21"},{"size":1723,"mtime":1608500865699,"results":"24","hashOfConfig":"21"},{"size":2380,"mtime":1608509914208,"results":"25","hashOfConfig":"21"},{"size":5710,"mtime":1608509804289,"results":"26","hashOfConfig":"21"},{"size":4278,"mtime":1608509804289,"results":"27","hashOfConfig":"21"},{"size":1416,"mtime":1608509914208,"results":"28","hashOfConfig":"21"},{"size":2160,"mtime":1608509914208,"results":"29","hashOfConfig":"21"},{"size":1797,"mtime":1608509804289,"results":"30","hashOfConfig":"21"},{"size":1638,"mtime":1608509804289,"results":"31","hashOfConfig":"21"},{"size":689,"mtime":1608509914208,"results":"32","hashOfConfig":"21"},{"size":1159,"mtime":1608509914208,"results":"33","hashOfConfig":"21"},{"size":1446,"mtime":1608509914208,"results":"34","hashOfConfig":"21"},{"size":1630,"mtime":1608509804293,"results":"35","hashOfConfig":"21"},{"size":4307,"mtime":1608509914208,"results":"36","hashOfConfig":"21"},{"size":5382,"mtime":1608509914208,"results":"37","hashOfConfig":"21"},{"size":1059,"mtime":1608509804289,"results":"38","hashOfConfig":"21"},{"size":282,"mtime":1608509804289,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"f3ieps",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/index.js",[],["88","89"],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/App.js",["90","91"],"import React from \"react\";\nimport \"./App.css\";\nimport { Button, Container } from \"react-bootstrap\";\nimport LandingPage from \"./components/landing\";\nimport NavBar from \"./components/navbar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Register from \"./components/register\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Login from \"./components/login\";\nimport { authService } from \"./components/auth-service\";\nimport PrivateRoute from \"./components/protected-route\";\nimport Profile from \"./components/profile\";\nimport CardDisplay from \"./components/card-display\";\nimport MyDecks from \"./components/my-decks\";\nimport DeckSearch from \"./components/deck-search\";\nimport RunDeck from \"./components/run-deck\";\nimport CreateCard from \"./components/create-card\";\nimport AddDeck from \"./components/add-deck\";\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n      />\n      <Router>\n        <NavBar />\n        <Container\n          className=\"center\"\n          fluid=\"md\"\n          style={{ textAlign: \"center\", marginTop: \"10%\" }}\n        >\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/card\" component={CardDisplay} />\n            <Route exact path=\"/decks\" component={MyDecks} />\n            <Route exact path=\"/search\" component={DeckSearch} />\n            <PrivateRoute exact path=\"/rundeck\" component={RunDeck} />\n            <PrivateRoute exact path=\"/profile\" component={Profile} />\n            <PrivateRoute exact path=\"/createcard\" component={CreateCard} />\n            <PrivateRoute exact path=\"/createdeck\" component={AddDeck} />\n          </Switch>\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/reportWebVitals.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/navbar.js",["92"],"import React, { useEffect, useState } from \"react\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nimport { useLocation } from \"react-router\";\nimport { authService } from \"./auth-service\";\nimport {useHistory} from 'react-router-dom';\n\nexport default function NavBar() {\n  const history = useHistory();\n  const [currentUser, setCurrentUser] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    const subscription = authService.currentUser.subscribe((user) =>\n      setCurrentUser(user)\n    );\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [currentUser]);\n\n  function logoutHelper() {\n    authService.logout();\n    history.push(\"/\");\n\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/\">Spaced Flashcards</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav variant=\"pills\" className=\"mr-auto\">\n            <Nav.Link eventKey=\"1\" href=\"/decks\">\n              My Decks\n            </Nav.Link>\n            <Nav.Link eventKey=\"2\" href=\"/search\">\n              Search Decks\n            </Nav.Link>\n          </Nav>\n          {!currentUser ? (\n            <Nav variant=\"pills\">\n              <Nav.Link eventKey=\"3\" href=\"/login\">\n                Login\n              </Nav.Link>\n              <Nav.Link eventKey=\"4\" href=\"/register\">\n                Register\n              </Nav.Link>\n            </Nav>\n          ) : (\n            <>\n              <p>{`welcome back, ${currentUser.userData.username}`}</p>\n              <Button onClick={logoutHelper}>Logout!</Button>\n            </>\n          )}\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n}\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/auth-service.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/register.js",["93"],"import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Register() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    alert(`submit registration data to backend: ${JSON.stringify(fields)}`);\n    const { email, username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        email: email,\n        password: password,\n      },\n    };\n    let response = await fetchCall(payload);\n    console.log(\n      `response to register user call is: ${JSON.stringify(response)}`\n    );\n\n    /* now that user has been created, get the jwt */\n    payload.url = process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\";\n    let jwtresponse = await fetchCall(payload);\n    jwtresponse.userData = { username, email };\n    console.log(`response to jwt call is: ${JSON.stringify(jwtresponse)}`);\n    authService.newUser(jwtresponse);\n    history.push({\n      pathname: \"/profile\",\n      state: response,\n    });\n\n    return;\n  }\n\n  console.log(`the base url is: ${process.env.REACT_APP_BASE_URL}`);\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Register</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Begin learning today by creating an account and joining the Spaced\n            Flashcards community! Just give us some basic information...\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              email: Yup.string()\n                .email(\"Email is invalid!!\")\n                .required(requiredMsg),\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n              confirmPassword: Yup.string()\n                .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    name=\"email\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.email && touched.email ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                  <Field\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.confirmPassword && touched.confirmPassword\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"confirmPassword\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Register\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/login.js",["94"],"import React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\nimport { authService } from \"./auth-service\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const history = useHistory();\n  const requiredMsg = \"This field is required!!\";\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  async function handleSubmit(fields) {\n    console.log(fields);\n    // alert(`submit login data to backend: ${JSON.stringify(fields)}`);\n    const { username, password } = fields;\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"auth/jwt/create/\",\n      method: \"POST\",\n      auth: false,\n      body: {\n        username: username,\n        password: password,\n      },\n    };\n    try {\n      let response = await fetchCall(payload);\n      response.userData = { username };\n      console.log(`response to login call is ${JSON.stringify(response)}`);\n      authService.login(response);\n      /* now fetch the userId */\n      console.log(authService.currentUserValue);\n      let idPayload = {\n        url: process.env.REACT_APP_BASE_URL + \"auth/users/\",\n        method: \"GET\",\n        auth: true,\n      };\n      let idResponse = await fetchCall(idPayload);\n      console.log(\n        `the response from getting id is: ${JSON.stringify(idResponse)}`\n      );\n      history.push({\n        pathname: \"/profile\",\n        state: idResponse[0],\n      });\n      return;\n    } catch (err) {\n      /* todo: error handling */\n      console.error(err);\n      toast.error(`Invalid login info, please retry!`);\n      history.push(\"/temp\");\n      history.goBack();\n      return;\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>Login</Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Login to access your decks and reinfornce your knowledge\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              username: Yup.string().required(requiredMsg),\n              password: Yup.string()\n                .min(6, \"Password must be at least 6 characters!!\")\n                .required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username (email)</label>\n                  <Field\n                    name=\"username\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.username && touched.username ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"username\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    name=\"password\"\n                    type=\"password\"\n                    className={\n                      \"form-control\" +\n                      (errors.password && touched.password ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Login\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/protected-route.js",["95"],"import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { authService } from \"./auth-service\";\nimport jwt_decode from \"jwt-decode\";\nimport { fetchCall } from \"./helpers\";\n\n/* TODO: this needs to refresh the jwt token */\nconst PrivateRoute = (props) => {\n  const authenticated =\n    !localStorage.getItem(\"currentUser\") || !authService.currentUserValue\n      ? false\n      : !(\n          new Date(\n            1000 * jwt_decode(authService.currentUserValue.refresh).exp\n          ) > new Date()\n        )\n      ? false\n      : true;\n  if (!authenticated) {\n    console.log(\"trying to log this guy out\");\n    authService.logout();\n    return <Redirect to=\"/login\" />;\n  }\n  // /* refresh the token */\n  // /* get the localstorage data */\n  // let payload = {\n  //   url: process.env.REACT_APP_BASE_URL + \"auth/jwt/refresh/\",\n  //   method: \"POST\",\n  //   auth: false,\n  //   body: {\n  //     refresh: authService.currentUserValue.refresh,\n  //   },\n  // };\n  // fetchCall(payload).then((response) => {\n  //   let local = JSON.parse(localStorage.getItem(\"currentUser\"));\n  //   local.access = response.access;\n  //   localStorage.setItem(\"currentUser\", JSON.stringify(local));\n  // });\n\n  return authenticated ? (\n    <Route path={props.path} exact={props.exact}>\n      <props.component {...props} />\n    </Route>\n  ) : (\n    <Redirect to=\"/login\" />\n  );\n};\n\nexport default PrivateRoute;\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/profile.js",["96","97"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useLocation } from \"react-router\";\nimport AddDeck from \"./add-deck\";\nimport CreateCard from \"./create-card\";\nimport { fetchCall } from \"./helpers\";\n\nconst sampleDecks = [\n  { id: 13, user_id: 4, deck_id: 8 },\n  { id: 12, user_id: 4, deck_id: 9 },\n];\n\nexport default function Profile() {\n  const location = useLocation();\n  const [decks, setDecks] = useState([]);\n  const [addingDeck, setAddingDeck] = useState(false);\n  const [addingCard, setAddingCard] = useState(false);\n\n  useEffect(() => {\n    /* on component load, fetch user's decks from backend, add to state */\n    // alert(\"fetch user's decks\");\n    /* temporary */\n    setDecks(sampleDecks);\n    setAddingCard(false);\n    setAddingDeck(false);\n    async function fetchData() {\n      let payload = {\n        url:\n          process.env.REACT_APP_BASE_URL +\n          `api/userdecks/user_list/?user_id=${location.state.id}`,\n        method: \"GET\",\n        auth: true,\n      };\n      try {\n        let response = await fetchCall(payload);\n        console.log(\n          \"response received from userdecks/user_list/\",\n          JSON.stringify(response)\n        );\n      } catch (err) {\n        console.error(err);\n        /* logout??? */\n      }\n    }\n    fetchData();\n  }, []);\n\n  function deckCallback() {\n    setAddingDeck(false);\n  }\n\n  function cardCallback() {\n    setAddingCard(false);\n  }\n\n  /* i need to pass all of the userdeck ids to the create card component, then\n   * do a dropdown to select the deck */\n  return (\n    <>\n      <h1>profile page... protected!</h1>\n      {!addingDeck && (\n        <Button\n          onClick={() => {\n            setAddingDeck(true);\n          }}\n        >\n          Create a New Deck!\n        </Button>\n      )}\n      {!addingCard && (\n        <Button\n          onClick={() => {\n            setAddingCard(true);\n          }}\n        >\n          Create Flashcard!\n        </Button>\n      )}\n      {addingDeck && (\n        <AddDeck userId={location.id} deckCallback={deckCallback} />\n      )}\n      {addingCard && <CreateCard decks={decks} />}\n    </>\n  );\n}\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/card-display.js",["98","99","100","101"],"import React, { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport ReactCardFlip from \"react-card-flip\";\nimport RateCard from \"./rate-card\";\n\n/* props should contain question: string, answer: string, card_id: num */\nexport default function CardDisplay(props) {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [rating, setRating] = useState(\"\");\n\n  function handleClick(event) {\n    event.preventDefault();\n    setIsFlipped(!isFlipped);\n  }\n\n  function handleRate(rating) {\n    setRating(rating);\n    setIsFlipped(false);\n    props.nextCard();\n    /* here, need to make API call to set the next display time of the current card */\n  }\n\n  return (\n    <>\n      <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\n        <a\n          style={{ cursor: \"pointer\" }}\n          onClick={(event) => {\n            handleClick(event);\n          }}\n        >\n          <Card>\n            <Card.Body\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                height: \"420px\",\n              }}\n            >\n              <Card.Text style={{ flex: \"1\" }}>{props.question}</Card.Text>\n            </Card.Body>\n          </Card>\n        </a>\n        <a\n          style={{ cursor: \"pointer\" }}\n          onClick={(event) => {\n            handleClick(event);\n          }}\n        >\n          <Card>\n            <Card.Body\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                height: \"420px\",\n              }}\n            >\n              <Card.Text style={{ flex: \"1\" }}>{props.answer}</Card.Text>\n            </Card.Body>\n          </Card>\n        </a>\n      </ReactCardFlip>\n      {isFlipped && <RateCard handleRate={handleRate} />}\n    </>\n  );\n}\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/landing.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/helpers.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/my-decks.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/deck-search.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/run-deck.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/add-deck.js",["102"],"import React from \"react\";\nimport { fetchCall } from \"./helpers\";\nimport { Card } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useHistory } from \"react-router\";\n\n/* will prob need userid in props */\nexport default function AddDeck(props) {\n  const history = useHistory();\n  const initialValues = {\n    deck_name: \"\",\n    deck_description: \"\",\n  };\n  const requiredMsg = \"This field is required!!\";\n\n  async function handleSubmit(fields) {\n    console.log(\n      `create deck handle submit: props i was passed are: ${JSON.stringify(\n        fields\n      )}`\n    );\n    const { deck_name, deck_description } = fields;\n    try {\n      let payload = {\n        url: process.env.REACT_APP_BASE_URL + \"api/decks/\",\n        method: \"POST\",\n        auth: true,\n        body: {\n          deck_name: deck_name,\n          deck_description: deck_description,\n        },\n      };\n      let response = await fetchCall(payload);\n      console.log(\n        `the response from create deck is ${JSON.stringify(response)}`\n      );\n      let userDeckPayload = {\n        url: process.env.REACT_APP_BASE_URL + \"api/userdecks/\",\n        method: \"POST\",\n        auth: true,\n        body: {\n          user_id: props.user_id,\n          deck_id: response.id,\n        },\n      };\n      let userDeckResponse = await fetchCall(payload);\n      console.log(`userdeck response is ${JSON.stringify(userDeckResponse)}`);\n      /* this will be rendered as a subcomponent in /profile... so after\n       * the deck is created, just refresh the page? */\n      props.deckCallback();\n      history.push(\"/temp\");\n      history.goBack();\n      return;\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>\n            Create New Deck\n          </Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Name your new deck and give a description!\n          </Card.Subtitle>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              deck_name: Yup.string().required(requiredMsg),\n              deck_description: Yup.string().required(requiredMsg),\n            })}\n            onSubmit={(fields) => {\n              handleSubmit(fields);\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"deck_name\">Deck Name</label>\n                  <Field\n                    name=\"deck_name\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.deck_name && touched.deck_name\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"deck_name\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"deck_description\">Deck Description</label>\n                  <Field\n                    name=\"deck_description\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.deck_description && touched.deck_description\n                        ? \" is-invalid\"\n                        : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"deck_description\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Create Deck!\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/create-card.js",["103"],"import React, { useState, useEffect } from \"react\";\nimport { Card, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { fetchCall } from \"./helpers\";\n\n/* need deck id in props */\nexport default function CreateCard(props) {\n  const [decks, setDecks] = useState([]);\n  const initialValues = {\n    question: \"\",\n    answer: \"\",\n  };\n  const requiredMsg = \"This field is required!!\";\n  const [selectedDeck, setSelectedDeck] = useState({\n    deck_name: \"Select Deck!\",\n  });\n\n  useEffect(() => {\n    /* get all the user's deck info */\n    setSelectedDeck({\n      deck_name: \"Select Deck!\",\n    });\n    async function fetchData() {\n      let payload = {\n        url: process.env.REACT_APP_BASE_URL + `api/decks/`,\n        method: \"GET\",\n        auth: true,\n      };\n      try {\n        let response = await fetchCall(payload);\n        console.log(`full list of decks is ${JSON.stringify(response)}`);\n        let fullDecks = [];\n        for (const element of response) {\n          let obj = props.decks.find((object) => object.deck_id === element.id);\n          if (obj !== undefined) {\n            fullDecks.push({ ...obj, ...element });\n          }\n        }\n        setDecks(fullDecks);\n        return;\n      } catch (err) {\n        console.error(err);\n        return;\n        /* logout??? */\n      }\n    }\n    fetchData();\n  }, []);\n\n  async function handleSubmit(fields) {\n    if (selectedDeck.deck_name === \"Select Deck!\") {\n      alert(\"please select (or create) a deck first!\");\n      return;\n    }\n    console.log(\n      `create card handle submit: props i was passed are: ${JSON.stringify(\n        fields\n      )}`\n    );\n    let payload = {\n      url: process.env.REACT_APP_BASE_URL + \"api/cards/\",\n      method: \"POST\",\n      auth: true,\n      body: {\n        question: fields.question,\n        answer: fields.answer,\n        deck_id: selectedDeck.id,\n        next_time_to_show: \"2020-10-12T00:00\",\n      },\n    };\n    try {\n      let response = await fetchCall(payload);\n      console.log(\n        `card creation request response is : ${JSON.stringify(response)}`\n      );\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n  }\n\n  const deckDropdown = [];\n  decks.forEach((deck, index) => {\n    deckDropdown.push(\n      <Dropdown.Item\n        as=\"button\"\n        key={index}\n        onClick={(e) => setSelectedDeck(deck)}\n      >{`${deck.deck_name} - ${deck.deck_description}`}</Dropdown.Item>\n    );\n  });\n\n  // function handleSelect(event) {\n  //   setSelectedDeck(decks.find((object) => object.id === event.id));\n  // }\n\n  return (\n    <>\n      <Card className=\"text-center\">\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"32px\" }}>\n            Create Flashcard\n          </Card.Header>\n          <Card.Subtitle\n            className=\"mb-2 text-muted\"\n            style={{ marginTop: \"10px\" }}\n          >\n            Give us a question and an answer\n          </Card.Subtitle>\n          <DropdownButton\n            id=\"dropdown-basic-button\"\n            title={`${selectedDeck.deck_name}`}\n            // onSelect={handleSelect}\n          >\n            {deckDropdown}\n          </DropdownButton>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object().shape({\n              question: Yup.string().required(requiredMsg),\n              answer: Yup.string().required(requiredMsg),\n            })}\n            onSubmit={(fields, actions) => {\n              handleSubmit(fields);\n              actions.resetForm({ fields: { question: \"\", answer: \"\" } });\n            }}\n            render={({ errors, touched }) => (\n              <Form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"question\">Question</label>\n                  <Field\n                    as=\"textarea\"\n                    name=\"question\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.question && touched.question ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"question\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"answer\">Answer</label>\n                  <Field\n                    as=\"textarea\"\n                    name=\"answer\"\n                    type=\"text\"\n                    className={\n                      \"form-control\" +\n                      (errors.answer && touched.answer ? \" is-invalid\" : \"\")\n                    }\n                  />\n                  <ErrorMessage\n                    name=\"answer\"\n                    component=\"div\"\n                    className=\"invalid-feedback\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Create Card!\n                  </button>\n                  <button type=\"reset\" className=\"btn btn-secondary\">\n                    Reset\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/rate-card.js",[],"/home/ryanrooker/hackathon/spaced-flashcard-site/client/src/components/deck-info.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":16},{"ruleId":"108","severity":1,"message":"112","line":11,"column":10,"nodeType":"110","messageId":"111","endLine":11,"endColumn":21},{"ruleId":"108","severity":1,"message":"113","line":10,"column":9,"nodeType":"110","messageId":"111","endLine":10,"endColumn":17},{"ruleId":"108","severity":1,"message":"114","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":15},{"ruleId":"108","severity":1,"message":"115","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"116","line":5,"column":10,"nodeType":"110","messageId":"111","endLine":5,"endColumn":19},{"ruleId":"117","severity":1,"message":"118","line":46,"column":6,"nodeType":"119","endLine":46,"endColumn":8,"suggestions":"120"},{"ruleId":"108","severity":1,"message":"121","line":52,"column":12,"nodeType":"110","messageId":"111","endLine":52,"endColumn":24},{"ruleId":"108","severity":1,"message":"122","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"108","severity":1,"message":"123","line":9,"column":10,"nodeType":"110","messageId":"111","endLine":9,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":26,"column":9,"nodeType":"126","endLine":31,"endColumn":10},{"ruleId":"124","severity":1,"message":"125","line":44,"column":9,"nodeType":"126","endLine":49,"endColumn":10},{"ruleId":"108","severity":1,"message":"127","line":38,"column":11,"nodeType":"110","messageId":"111","endLine":38,"endColumn":26},{"ruleId":"117","severity":1,"message":"128","line":49,"column":6,"nodeType":"119","endLine":49,"endColumn":8,"suggestions":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'authService' is defined but never used.","'location' is assigned a value but never used.","'toast' is defined but never used.","'useState' is defined but never used.","'fetchCall' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.state.id'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'cardCallback' is defined but never used.","'useEffect' is defined but never used.","'rating' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'userDeckPayload' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.decks'. Either include it or remove the dependency array.",["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [location.state.id]",{"range":"138","text":"139"},"Update the dependencies array to be: [props.decks]",{"range":"140","text":"141"},[1332,1334],"[location.state.id]",[1421,1423],"[props.decks]"]